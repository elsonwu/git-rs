name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Check code formatting
  fmt:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
          
      - name: Check formatting
        run: cargo fmt --all -- --check

  # Lint with Clippy
  clippy:
    name: Clippy Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-clippy-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-clippy-
            ${{ runner.os }}-cargo-
            
      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  # Build and test on multiple platforms
  test:
    name: Test Suite
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            rust: 1.70.0  # MSRV (Minimum Supported Rust Version)
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-cargo-test-
            ${{ runner.os }}-${{ matrix.rust }}-cargo-
            ${{ runner.os }}-cargo-
            
      - name: Build
        run: cargo build --verbose --all-features
        
      - name: Run tests
        run: cargo test --verbose --all-features
        
      - name: Run doctests
        run: cargo test --doc --verbose

  # Check documentation builds
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-docs-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-docs-
            ${{ runner.os }}-cargo-
            
      - name: Check documentation
        run: cargo doc --no-deps --document-private-items --all-features
        env:
          RUSTDOCFLAGS: -D warnings

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
        
      - name: Run security audit
        run: cargo audit

  # Check for unused dependencies
  unused-deps:
    name: Unused Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
        
      - name: Install cargo-udeps
        run: cargo install cargo-udeps --locked
        
      - name: Check for unused dependencies
        run: cargo +nightly udeps --all-targets

  # Integration test - ensure git-rs works end-to-end
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-integration-
            ${{ runner.os }}-cargo-
            
      - name: Build release binary
        run: cargo build --release
        
      - name: Test git-rs workflow
        run: |
          # Create test directory
          mkdir test-repo
          cd test-repo
          
          # Test git-rs init
          ../target/release/git-rs init
          test -d .git-rs || (echo "Failed: .git-rs directory not created" && exit 1)
          
          # Create test file
          echo "Hello Git-RS Integration Test" > test.txt
          
          # Test git-rs status (should show untracked)
          ../target/release/git-rs status | grep "test.txt" || (echo "Failed: test.txt not shown as untracked" && exit 1)
          
          # Test git-rs add
          ../target/release/git-rs add test.txt
          
          # Test git-rs status (should show staged)
          ../target/release/git-rs status | grep "Changes to be committed" || (echo "Failed: changes not staged properly" && exit 1)
          
          # Verify object was created
          test -n "$(find .git-rs/objects -name '*' -type f)" || (echo "Failed: no objects created" && exit 1)
          
          echo "✅ Integration test passed!"

  # All checks must pass
  ci-success:
    name: CI Success
    if: always()
    needs: [fmt, clippy, test, docs, security, unused-deps, integration]
    runs-on: ubuntu-latest
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.fmt.result }}" != "success" ]]; then
            echo "❌ Format check failed"
            exit 1
          fi
          if [[ "${{ needs.clippy.result }}" != "success" ]]; then
            echo "❌ Clippy check failed" 
            exit 1
          fi
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "❌ Tests failed"
            exit 1
          fi
          if [[ "${{ needs.docs.result }}" != "success" ]]; then
            echo "❌ Documentation check failed"
            exit 1
          fi
          if [[ "${{ needs.security.result }}" != "success" ]]; then
            echo "❌ Security audit failed"
            exit 1
          fi
          if [[ "${{ needs.unused-deps.result }}" != "success" ]]; then
            echo "❌ Unused dependencies check failed"
            exit 1
          fi
          if [[ "${{ needs.integration.result }}" != "success" ]]; then
            echo "❌ Integration tests failed"
            exit 1
          fi
          echo "✅ All CI checks passed!"
